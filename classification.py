# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a7PlzlPAtO52mmv5CF7UTerU7ZjvbFPW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

dataFrame=pd.read_excel("maliciousornot.xlsx")
dataFrame.head()

dataFrame.info()

dataFrame.isnull().sum()

dataFrame.describe()

dataFrame.corr()["Type"].sort_values().plot(kind="bar")

y=dataFrame["Type"].values
x=dataFrame.drop("Type",axis=1).values

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=15)

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense,Activation,Dropout
from keras.callbacks import EarlyStopping

x_train.shape

model=Sequential()
model.add(Dense(units=30,activation="relu"))
model.add(Dense(units=15,activation="relu"))
model.add(Dense(units=15,activation="relu"))
model.add(Dense(units=1,activation="sigmoid"))#0-1 gibi değer döndütrür sigmoid (sınıflandırma için uygundur)
model.compile(loss="binary_crossentropy",optimizer="adam")

model.fit(x=x_train,y=y_train,epochs=700,validation_data=(x_test,y_test),verbose=1)

modelKaybi=pd.DataFrame(model.history.history)
modelKaybi.plot()

model=Sequential()
model.add(Dense(units=30,activation="relu"))
model.add(Dense(units=15,activation="relu"))
model.add(Dense(units=15,activation="relu"))
model.add(Dense(units=1,activation="sigmoid"))#0-1 gibi değer döndütrür sigmoid (sınıflandırma için uygundur)
model.compile(loss="binary_crossentropy",optimizer="adam")

earlyStopping=EarlyStopping(monitor="val_loss",mode="min",verbose=1,patience=25)

model.fit(x=x_train,y=y_train,epochs=700,validation_data=(x_test,y_test),verbose=1,callbacks=[earlyStopping])

modelKaybi=pd.DataFrame(model.history.history)
modelKaybi.plot()

x_train.shape

model=Sequential()
model.add(Dense(units=30,activation="relu"))
model.add(Dropout(0.6))
model.add(Dense(units=15,activation="relu"))
model.add(Dropout(0.6))
model.add(Dense(units=15,activation="relu"))
model.add(Dropout(0.6))
model.add(Dense(units=1,activation="sigmoid"))#0-1 gibi değer döndütrür sigmoid (sınıflandırma için uygundur)
model.compile(loss="binary_crossentropy",optimizer="adam")

model.fit(x=x_train,y=y_train,epochs=700,validation_data=(x_test,y_test),verbose=1,callbacks=[earlyStopping])

kayip=pd.DataFrame(model.history.history)
kayip.plot()

from sklearn.metrics import confusion_matrix,classification_report



